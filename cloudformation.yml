AWSTemplateFormatVersion: 2010-09-09
Description: Template to spin up a rudimentary Data LakeHouse Architecture with automated data cataloging

Parameters:
  Environment:
    Description: The environment name
    Type: String

Mappings:
  EnvironmentValues:
    Staging:
      LandingZoneBucketName: lg-airbnb-staging-data-landing-zone
      CleanZoneBucketName: lg-airbnb-staging-data-clean-zone
      ArchiveZoneBucketName: lg-airbnb-staging-data-archive-zone
      LambdaBucketName: lg-lambda-bucket
      RedshiftClusterName: redshift-cluster-airbnb-staging-dw
      RedshiftDBName: lisbon_airbnb_prod
      GlueCatalogDBName: accomodation
      RedshiftClusterId: airbnb-cluster
      
    Production:
      LandingZoneBucketName: lg-airbnb-production-data-landing-zone
      CleanZoneBucketName: lg-airbnb-production-data-clean-zone
      LambdaBucketName: lg-lambda-production-bucket
      RedshiftClusterName: redshift-cluster-airbnb-production-dw

Transform: AWS::SecretsManager-2020-07-23

Resources:  
# ---- S3 Buckets     
  LandingZone:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !FindInMap [EnvironmentValues, Staging, LandingZoneBucketName]
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogBucketLanding

  CleanZone:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !FindInMap [EnvironmentValues, Staging, CleanZoneBucketName]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogBucketClean

  ArchiveZone:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !FindInMap [EnvironmentValues, Staging, ArchiveZoneBucketName]
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 0
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogBucketArchive

  AccessLogBucketLanding:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
          
  AccessLogBucketClean:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  AccessLogBucketArchive:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

# ---- Events and Notifications
  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: Triggers StateMachine when a new file is uploaded to landing zone bucket
      EventBusName: default
      EventPattern:
        source:
          - aws.s3
        detail-type: 
          - Object Created
        detail: 
          bucket: 
            name: 
              - !FindInMap [EnvironmentValues, Staging, LandingZoneBucketName]
      Name: start-state-machine
      State: ENABLED
      Targets: 
        - Arn: arn:aws:states:ap-southeast-2:626218913707:stateMachine:ProcessFilesStateMachine
          Id: ProcessFilesStateMachine
          RoleArn: !GetAtt InvokeStateMachineIamRole.Arn

  FailureTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: FileExtensionFailureNotification
      DisplayName: Incorrect file format has been uploaded. Must be of type .csv or .xlsx

  SuccessTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: FileExtensionSuccessNotification
      DisplayName: File succesfully uploaded, begining workflow.

  MyFailEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref FailureTopic
      # Retrieve email from pre-existing secret
      Endpoint: "{{resolve:secretsmanager:my_secret_email:SecretString:my_email}}"

  MySuccessEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref SuccessTopic
      # Retrieve email from pre-existing secret
      Endpoint: "{{resolve:secretsmanager:my_secret_email:SecretString:my_email}}"

# ---- IAM Roles
  InvokeStateMachineIamRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies: 
        - PolicyName: InvokeStateMachineRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - states:StartExecution
                  # TODO - add StateMachine service and replace this hard-coded arn
                Resource: arn:aws:states:ap-southeast-2:626218913707:stateMachine:ProcessFilesStateMachine
 
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Role to provide lambda and glue access to s3
      Policies:
        - PolicyName: AirbnbDataLakehouseLambdaS3GluePolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: "*"
              - Effect: Allow 
                Action: s3:*
                Resource:
                  - !GetAtt LandingZone.Arn
                  - !Sub "${LandingZone.Arn}/*"
                  - !GetAtt CleanZone.Arn
                  - !Sub "${CleanZone.Arn}/*"
                  - !GetAtt ArchiveZone.Arn
                  - !Sub "${ArchiveZone.Arn}/*"
              - Effect: Allow 
                Action: glue:*
                Resource: '*'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonRedshiftFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
      RoleName: AirbnbS3GlueLambdaRole

  RedshiftRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - redshift.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Allows Redshift clusters to call AWS services on your behalf
      Policies:
        - PolicyName: EmbeddedInlinePolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - s3-object-lambda:*
                Resource: 
                  - !GetAtt CleanZone.Arn
                  - !Sub ${CleanZone.Arn}/*
                  - !GetAtt LandingZone.Arn
                  - !Sub ${LandingZone.Arn}/*
                  - !GetAtt AccessLogBucketLanding.Arn
                  - !Sub ${AccessLogBucketLanding.Arn}/*
                  - !GetAtt AccessLogBucketClean.Arn
                  - !Sub ${AccessLogBucketClean.Arn}/*
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
      RoleName: RedshiftS3Access

  SNSPublishRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies: 
        - PolicyName: InvokeStateMachineRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - states:StartExecution
                  # TODO - add StateMachine service and replace this hard-coded arn
                Resource: arn:aws:states:ap-southeast-2:626218913707:stateMachine:ProcessFilesStateMachine

# ---- Lambdas
  CSVtoParquetLambda: 
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap [EnvironmentValues, Staging, LambdaBucketName]
        S3Key: airbnb_data_lakehouse/CSVtoParquetLambda.py.zip
      Environment:
        Variables:
          clean_zone_bucket_name: !FindInMap [EnvironmentValues, Staging, CleanZoneBucketName]
      FunctionName: CSVtoParquetLambda
      Handler: CSVtoParquetLambda.lambda_handler
      Runtime: python3.9
      Layers:
        - arn:aws:lambda:ap-southeast-2:336392948345:layer:AWSDataWrangler-Python39:1
        - !Ref LandingEventLayer
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout : 300
      MemorySize: 1024

  ExcelToParquetLambda: 
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap [EnvironmentValues, Staging, LambdaBucketName]
        S3Key: airbnb_data_lakehouse/ExcelToParquetLambda.py.zip
      FunctionName: ExcelToParquetLambda
      Handler: ExcelToParquetLambda.lambda_handler
      Runtime: python3.9
      Layers:
        - arn:aws:lambda:ap-southeast-2:336392948345:layer:AWSDataWrangler-Python39:1
        - !Ref LandingEventLayer
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout : 500
      MemorySize: 2048

  CheckFileExtensionLambda: 
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap [EnvironmentValues, Staging, LambdaBucketName]
        S3Key: airbnb_data_lakehouse/CheckFileExtensionLambda.py.zip
      FunctionName: CheckFileExtensionLambda
      Handler: CheckFileExtensionLambda.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout : 60
      MemorySize: 128

  CreateExternalSchemaLambda: 
    Type: AWS::Lambda::Function
    DependsOn: RedshiftSecret
    Properties:
      Code:
        S3Bucket: !FindInMap [EnvironmentValues, Staging, LambdaBucketName]
        S3Key: airbnb_data_lakehouse/CreateExternalSchemaLambda.py.zip
      Environment:
        Variables:
          redshift_role_arn: !GetAtt RedshiftRole.Arn
          secret_arn:
            Ref: RedshiftSecret
          schema_name: !FindInMap [EnvironmentValues, Staging, GlueCatalogDBName]
          cluster_id: !FindInMap [EnvironmentValues, Staging, RedshiftClusterId]
          redshift_db_name: !FindInMap [EnvironmentValues, Staging, RedshiftDBName]
      FunctionName: CreateExternalSchemaLambda
      Handler: CreateExternalSchemaLambda.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout : 60
      MemorySize: 128

  ArchiveFileLambda: 
    Type: AWS::Lambda::Function
    DependsOn: Boto3Layer
    Properties:
      Code:
        S3Bucket: !FindInMap [EnvironmentValues, Staging, LambdaBucketName]
        S3Key: airbnb_data_lakehouse/ArchiveFileLambda.py.zip
      Environment:
        Variables:
          landing_zone_bucket_name: !FindInMap [EnvironmentValues, Staging, LandingZoneBucketName]
          archive_zone_bucket_name: !FindInMap [EnvironmentValues, Staging, ArchiveZoneBucketName]
      FunctionName: ArchiveFileLambda
      Handler: ArchiveFileLambda.lambda_handler
      Runtime: python3.9
      Layers: 
        - !Ref Boto3Layer
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout : 120
      MemorySize: 128
  
  # - Lambda Layers
  Boto3Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: boto3_layer
      Description: Contains functions to interact with s3 using boto3
      Content:
        S3Bucket: !FindInMap [EnvironmentValues, Staging, LambdaBucketName]
        S3Key: layers/boto3_lib.zip
      CompatibleRuntimes:
        - python3.9

  LandingEventLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: landing_event_layer
      Description: Contains functions to process files and set up Glue tables when files arrive in landing zone
      Content:
        S3Bucket: !FindInMap [EnvironmentValues, Staging, LambdaBucketName]
        S3Key: layers/landing_event_layer.zip
      CompatibleRuntimes:
        - python3.9

# ---- Secrets
  RedshiftSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: This is my redshift instance secret
      GenerateSecretString:
        SecretStringTemplate: '{"username": "lg_admin"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludePunctuation: True
      Tags:
      - Key: project
        Value: airbnb_data_lakehouse

  SecretRedshiftAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: RedshiftSecret
      TargetId:
        Ref: RedshiftCluster
      TargetType: AWS::Redshift::Cluster

  RedshiftSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretRedshiftAttachment
    Properties:
      SecretId:
        Ref: RedshiftSecret
      HostedRotationLambda:
        RotationType: RedshiftSingleUser
        RotationLambdaName: SecretsManagerRotationRedshift
      RotationRules:
        Duration: 2h
        ScheduleExpression: 'cron(0 8 1 * ? *)'

# ---- Redshift
  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    Properties:
      DBName: !FindInMap [EnvironmentValues, Staging, RedshiftDBName]
      NodeType: dc2.large
      ClusterType: single-node
      ClusterIdentifier: !FindInMap [EnvironmentValues, Staging, RedshiftClusterId]
      MasterUsername:
        Fn::Sub: "{{resolve:secretsmanager:${RedshiftSecret}::username}}"
      MasterUserPassword:
        Fn::Sub: "{{resolve:secretsmanager:${RedshiftSecret}::password}}"
      IamRoles: 
        - !GetAtt RedshiftRole.Arn



Outputs:
  LambdaLayerArn:
    Value: !Ref Boto3Layer
